architecture rtl of Arbiter is
	signal slot : 			std_logic_vector(2 downto 0) := "000";
	signal route : 		std_logic_vector(WIDTH downto 0)	:= "00000000";
		
begin

	--Scheduler: 	Creates the time slot alloted to a process (below)
	--					to execute critical code that must be mutually
	--					exclusive.
	scheduler_process: process
	begin
		wait until clk'event and clk = '1';
			if(slot = "100") then
				slot <= "000";					--reset
			else
				slot <= slot + 1;				--increment the slot (time expired on current slot)
			end if;
	end process;
	
	--Process Handles buffer requests
	arbiter_process: process(slot)
		--variable routing_table : t_ram := 
		--( "00000110",
		--  "00000111",
		--  "00001000",
		--  "00001001",
		--  "00000101",
		--  "00000110",
		--  "00000111",
		--  "00001000");
		variable routing_table : t_ram := 
		( "00000000",
		  "00000001",
		  "00000010",
		  "00000011",
		  "00000100",
		  "00000101",
		  "00000110",
		  "00000111");
		 variable packet_data		 : std_logic_vector(WIDTH downto 0) := "00000000";
		
	begin	
		case slot is
			when "000" =>										--input FIFO_0 (NORTH)
				if (request_0 = '1') then	
					--Read in Packet
					buffer_en_0 <= '1';
					packet_data:= n_data_in;
					buffer_en_0 <= '0' after 20 ns;
					
					--Look up Routing Table
					route <= routing_table(conv_integer(packet_data)) after 30 ns;						--Test: TRANSMIT TO FIFO_6 (NORTH)
				end if;
			when "001" =>										--input FIFO_1 (EAST)
				if (request_1 = '1') then	
					--Read in Packet
					buffer_en_1 <= '1';
					packet_data := e_data_in;
					buffer_en_1 <= '0' after 20 ns;
					
					--Look up Routing Table
					route <= routing_table(conv_integer(packet_data)) after 30 ns;						--Test: TRANSMIT TO FIFO_7 (EAST)
				end if;
			when "010" =>										--input FIFO_2 (SOUTH)
				if (request_2 = '1') then	
					--Read in Packet
					buffer_en_2 <= '1';
					packet_data := s_data_in;
					buffer_en_2 <= '0' after 20 ns;
					
					--Look up Routing Table
					route <= routing_table(conv_integer(packet_data)) after 30 ns;						--Test: TRANSMIT TO FIFO_8 (SOUTH)
				end if;
			when "011" =>										--input FIFO_3 (WEST)
				if (request_3 = '1') then	
					--Read in Packet
					buffer_en_3 <= '1';
					packet_data := w_data_in;
					buffer_en_3 <= '0' after 20 ns;
					
					--Look up Routing Table
					route <= routing_table(conv_integer(packet_data)) after 30 ns;						--Test: TRANSMIT TO FIFO_9 (WEST)
				end if;
			when "100" =>										--input FIFO_4 (INJECTION)
				if (request_4 = '1') then	
					--Read in Packet
					buffer_en_4 <= '1';
					packet_data := injection_data_in;
					buffer_en_4 <= '0' after 20 ns;
					
					--Look up Routing Table
					route <= routing_table(conv_integer(packet_data)) after 30 ns;						--Test: TRANSMIT TO FIFO_5 (EJECTION)
				end if;
			when others =>
				null;
		end case;
	end process;
	
	--Process handles the routing of packet
	route_process: process(route)
	begin
		case route is
			--when "00000101" =>
			when "00000000" =>
				if(request_5 = '0') then
					--Enqueue the buffer
					buffer_en_5 <= '1';
					
					--Assign rna_result
					rna_result <= route;
					
					--Enable switch and transmit route
					switch_en <= '1';
					switch_en <= '0' after 10 ns;
						
					buffer_en_5 <= '0' after 50 ns;
				end if;
			--when "00000110" =>
			when "00000001" =>
				if(request_6 = '0') then
					--Enqueue the buffer
					buffer_en_6 <= '1';
					
					--Assign rna_result
					rna_result <= route;
					
					--Enable switch and transmit route
					switch_en <= '1';
					switch_en <= '0' after 10 ns;
						
					buffer_en_6 <= '0' after 50 ns;
				end if;
			--when "00000111" =>
			when "00000010" =>
				if(request_7 = '0') then
					--Enqueue the buffer
					buffer_en_7 <= '1';
					
					--Assign rna_result
					rna_result <= route;
					
					--Enable switch and transmit route
					switch_en <= '1';
					switch_en <= '0' after 10 ns;
						
					buffer_en_7 <= '0' after 50 ns;
				end if;
			--when "00001000" =>
			when "00000011" =>
				if(request_8 = '0') then
					--Enqueue the buffer
					buffer_en_8 <= '1';
					
					--Assign rna_result
					rna_result <= route;
					
					--Enable switch and transmit route
					switch_en <= '1';
					switch_en <= '0' after 10 ns;
						
					buffer_en_8 <= '0' after 50 ns;
				end if;
			--when "00001001" =>
			when "00000100" =>
				if(request_9 = '0') then
					--Enqueue the buffer
					buffer_en_9 <= '1';
					
					--Assign rna_result
					rna_result <= route;
					
					--Enable switch and transmit route
					switch_en <= '1';
					switch_en <= '0' after 10 ns;
						
					buffer_en_9 <= '0' after 50 ns;
				end if;				
			when others =>
				null;
		end case;		
	end process;		
end rtl;

